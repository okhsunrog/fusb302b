config:
  register_address_type: u8
  buffer_address_type: u8
  default_byte_order: BE
  defmt_feature: "defmt"

DeviceId:
  type: register
  address: 0x01
  size_bits: 8
  access: RO # Datasheet: R
  description: "Device Identification Register"
  fields:
    device_id:
      base: uint
      start: 0
      end: 8 # Bits 0-7
      description: "Device ID value (e.g., 0x9x for FUSB302B variants)."

Switches0:
  type: register
  address: 0x02
  size_bits: 8
  access: RW # Datasheet: R/W
  description: "Switch Control Register 0"
  fields:
    pu_en2:
      base: bool
      start: 7
      description: "Pull-up enable for CC2 (true: apply host pull-up current)."
    pu_en1:
      base: bool
      start: 6
      description: "Pull-up enable for CC1 (true: apply host pull-up current)."
    vconn_cc2:
      base: bool
      start: 5
      description: "VCONN enable for CC2 (true: turn on VCONN current)."
    vconn_cc1:
      base: bool
      start: 4
      description: "VCONN enable for CC1 (true: turn on VCONN current)."
    meas_cc2:
      base: bool
      start: 3
      description: "Measure CC2 (true: monitor/measure voltage on CC2)."
    meas_cc1:
      base: bool
      start: 2
      description: "Measure CC1 (true: monitor/measure voltage on CC1)."
    pdwn2:
      base: bool
      start: 1
      description: "Pull-down for CC2 (true: device pull-down on)."
    pdwn1:
      base: bool
      start: 0
      description: "Pull-down for CC1 (true: device pull-down on)."

Switches1:
  type: register
  address: 0x03
  size_bits: 8
  access: RW # Datasheet: R/W
  description: "Switch Control Register 1"
  fields:
    powerrole:
      base: uint
      start: 7
      end: 8
      description: "Power role for GoodCRC packet."
      conversion:
        name: PowerRolePort
        Sink: { value: 0, description: "Sink for SOP" }
        Source: { value: 1, description: "Source for SOP" }
    specrev:
      base: uint
      start: 5 # Bits 5-6
      end: 7
      description: "Specification revision for GoodCRC packet."
      try_conversion:
        name: SpecRev
        Revision1_0: { value: 0, description: "Revision 1.0" }
        Revision2_0: { value: 1, description: "Revision 2.0" }
    datarole:
      base: bool # Could also be an enum conversion
      start: 4
      description: "Data role for GoodCRC packet (true: SRC, false: SNK for SOP)."
    # Bit 3 is Reserved.
    auto_crc:
      base: bool
      start: 2
      description: "Automatic CRC handling (true: auto-send GoodCRC on valid packet)."
    txcc2:
      base: bool
      start: 1
      description: "Transmit on CC2 (true: enable BMC transmit driver)."
    txcc1:
      base: bool
      start: 0
      description: "Transmit on CC1 (true: enable BMC transmit driver)."

Measure:
  type: register
  address: 0x04
  size_bits: 8
  access: RW # Datasheet: R/W
  description: "Measure Control Register"
  fields:
    # Bit 7 is Reserved.
    meas_vbus:
      base: bool
      start: 6
      description: "Measure VBUS (true: measure VBUS voltage)."
    mdac:
      base: uint
      start: 0 # Bits 0-5
      end: 6
      description: "MDAC setting for voltage measurement threshold."

Slice:
  type: register
  address: 0x05
  size_bits: 8
  access: RW # Datasheet: R/W
  description: "Slice Control Register"
  fields:
    sdac_hys:
      base: uint
      start: 6 # Bits 6-7
      end: 8
      description: "SDAC hysteresis setting."
      conversion:
        name: SdacHys
        NoHysteresis: { value: 0, description: "No hysteresis" }
        Hys85mV: { value: 1, description: "85mV hysteresis" }
        Hys170mV: { value: 2, description: "170mV hysteresis" }
        Hys255mV: { value: 3, description: "255mV hysteresis" }
    sdac:
      base: uint
      start: 0 # Bits 0-5
      end: 6
      description: "SDAC setting for BMC slicer DAC threshold."

Control0:
  type: register
  address: 0x06
  size_bits: 8
  access: RW # Datasheet: R/W/C (due to W/C fields)
  description: "Control Register 0"
  fields:
    # Bit 7 is Reserved.
    tx_flush:
      base: bool
      start: 6
      access: WO # Datasheet Field: W/C (Self-clearing)
      description: "Flush transmit FIFO. Write true to trigger; self-clearing."
    int_mask:
      base: bool
      start: 5
      # access: RW inherited from register (Datasheet Field: R/W)
      description: "Interrupt mask (true: mask all interrupts)."
    # Bit 4 is Reserved.
    host_cur:
      base: uint
      start: 2 # Bits 2-3
      end: 4
      # access: RW inherited from register (Datasheet Field: R/W)
      description: "Host current setting for pull-ups."
      conversion:
        name: HostCurrent
        NoCurrent: { value: 0, description: "No current" }
        Default80uA: { value: 1, description: "80µA - Default USB power" }
        Medium180uA: { value: 2, description: "180µA - 1.5A" }
        High330uA: { value: 3, description: "330µA - 3A" }
    auto_pre:
      base: bool
      start: 1
      # access: RW inherited from register (Datasheet Field: R/W)
      description: "Auto preamble (true: auto-start transmitter on good CRC)."
    tx_start:
      base: bool
      start: 0
      access: WO # Datasheet Field: W/C (Self-clearing)
      description: "Start transmission. Write true to trigger; self-clearing."

Control1:
  type: register
  address: 0x07
  size_bits: 8
  access: RW # Datasheet: R/W/C (due to W/C field)
  description: "Control Register 1"
  fields:
    # Bit 7 is Reserved.
    ensop2db:
      base: bool
      start: 6
      description: "Enable SOP'' Debug packets (true: enabled)."
    ensop1db:
      base: bool
      start: 5
      description: "Enable SOP' Debug packets (true: enabled)."
    bist_mode2:
      base: bool
      start: 4
      description: "BIST Mode 01s pattern (true: enabled for testing)."
    # Bit 3 is Reserved.
    rx_flush:
      base: bool
      start: 2
      access: WO # Datasheet Field: W/C (Self-clearing)
      description: "Flush receive FIFO. Write true to trigger; self-clearing."
    ensop2:
      base: bool
      start: 1
      description: "Enable SOP'' packets (true: enabled)."
    ensop1:
      base: bool
      start: 0
      description: "Enable SOP' packets (true: enabled)."

Control2:
  type: register
  address: 0x08
  size_bits: 8
  access: RW # Datasheet: R/W
  description: "Control Register 2"
  fields:
    tog_save_pwr:
      base: uint
      start: 6 # Bits 6-7
      end: 8
      description: "Toggle save power setting."
      conversion:
        name: TogSavePwr
        NoDisable: { value: 0, description: "No disable state" }
        Wait40ms: { value: 1, description: "Wait 40ms between cycles" }
        Wait80ms: { value: 2, description: "Wait 80ms between cycles" }
        Wait160ms: { value: 3, description: "Wait 160ms between cycles" }
    tog_rd_only:
      base: bool
      start: 5
      description: "Toggle Rd only (true: stop on Rd only)."
    # Bit 4 is Reserved.
    wake_en:
      base: bool
      start: 3
      description: "Wake detection enable (true: enabled)."
    mode:
      base: uint
      start: 1 # Bits 1-2
      end: 3
      description: "Toggle mode selection."
      try_conversion:
        name: ToggleMode
        DrpPolling: { value: 1, description: "DRP polling" }
        SnkPolling: { value: 2, description: "SNK polling" }
        SrcPolling: { value: 3, description: "SRC polling" }
    toggle:
      base: bool
      start: 0
      description: "Enable toggle (true: autonomous DRP/SNK/SRC toggle)."

Control3:
  type: register
  address: 0x09
  size_bits: 8
  access: RW # Datasheet: R/W/C (due to W/C field)
  description: "Control Register 3"
  fields:
    # Bit 7 is Reserved.
    send_hard_reset:
      base: bool
      start: 6
      access: WO # Datasheet Field: W/C (Self-clearing)
      description: "Send hard reset. Write true to initiate; self-clearing."
    bist_tmode:
      base: bool
      start: 5
      description: "BIST test mode (true: clear RxFIFO after GoodCRC)."
    auto_hardreset:
      base: bool
      start: 4
      description: "Auto hard reset on soft reset fail (true: enabled)."
    auto_softreset:
      base: bool
      start: 3
      description: "Auto soft reset on retries fail (true: enabled)."
    n_retries:
      base: uint
      start: 1 # Bits 1-2
      end: 3
      description: "Number of packet retries."
      conversion:
        name: RetryCount
        NoRetries: { value: 0, description: "No retries" }
        OneRetry: { value: 1, description: "1 retry" }
        TwoRetries: { value: 2, description: "2 retries" }
        ThreeRetries: { value: 3, description: "3 retries" }
    auto_retry:
      base: bool
      start: 0
      description: "Auto retry on no GoodCRC (true: enabled)."

Mask:
  type: register
  address: 0x0A
  size_bits: 8
  access: RW # Datasheet: R/W
  description: "Interrupt Mask Register"
  fields:
    m_vbusok:
      base: bool
      start: 7
      description: "Mask I_VBUSOK interrupt (true: masked)."
    m_activity:
      base: bool
      start: 6
      description: "Mask I_ACTIVITY interrupt (true: masked)."
    m_comp_chng:
      base: bool
      start: 5
      description: "Mask I_COMP_CHNG interrupt (true: masked)."
    m_crc_chk:
      base: bool
      start: 4
      description: "Mask I_CRC_CHK interrupt (true: masked)."
    m_alert:
      base: bool
      start: 3
      description: "Mask I_ALERT interrupt (true: masked)."
    m_wake:
      base: bool
      start: 2
      description: "Mask I_WAKE interrupt (true: masked)."
    m_collision:
      base: bool
      start: 1
      description: "Mask I_COLLISION interrupt (true: masked)."
    m_bc_lvl:
      base: bool
      start: 0
      description: "Mask I_BC_LVL interrupt (true: masked)."

Power:
  type: register
  address: 0x0B
  size_bits: 8
  access: RW # Datasheet: R/W
  description: "Power Control Register"
  fields:
    # Bits 7-4 are Reserved.
    pwr3_internal_oscillator_enable:
      base: bool
      start: 3
      description: "Enable internal oscillator (PWR[3])."
    pwr2_measure_block_power_enable:
      base: bool
      start: 2
      description: "Measure block powered (PWR[2])."
    pwr1_receiver_and_measure_refs_enable:
      base: bool
      start: 1
      description: "Receiver powered and current references for Measure block (PWR[1])."
    pwr0_bandgap_and_wake_enable:
      base: bool
      start: 0
      description: "Bandgap and wake circuit enabled (PWR[0])."

Reset:
  type: register
  address: 0x0C
  size_bits: 8
  access: WO # Datasheet: W/C (Fields are self-clearing triggers)
  description: "Reset Control Register"
  fields:
    # Bits 7-2 are Reserved.
    pd_reset:
      base: bool
      start: 1
      description: "Reset PD logic. Write true to reset; self-clearing."
    sw_res:
      base: bool
      start: 0
      description: "Software reset. Write true to reset entire device; self-clearing."

Ocpreg:
  type: register
  address: 0x0D
  size_bits: 8
  access: RW # Datasheet: R/W
  description: "Over-Current Protection Register"
  fields:
    # Bits 7-4 are Reserved.
    ocp_range:
      base: bool
      start: 3
      description: "OCP range (true: 100-800mA, false: 10-80mA)."
    ocp_cur:
      base: uint
      start: 0 # Bits 0-2
      end: 3
      description: "OCP current setting (fraction of max range)."

Maska:
  type: register
  address: 0x0E
  size_bits: 8
  access: RW # Datasheet: R/W
  description: "Interrupt Mask Register A"
  fields:
    m_ocp_temp:
      base: bool
      start: 7
      description: "Mask I_OCP_TEMP interrupt (true: masked)."
    m_togdone:
      base: bool
      start: 6
      description: "Mask I_TOGDONE interrupt (true: masked)."
    m_softfail:
      base: bool
      start: 5
      description: "Mask I_SOFTFAIL interrupt (true: masked)."
    m_retryfail:
      base: bool
      start: 4
      description: "Mask I_RETRYFAIL interrupt (true: masked)."
    m_hardsent:
      base: bool
      start: 3
      description: "Mask I_HARDSENT interrupt (true: masked)."
    m_txsent:
      base: bool
      start: 2
      description: "Mask I_TXSENT interrupt (true: masked)."
    m_softrst:
      base: bool
      start: 1
      description: "Mask I_SOFTRST interrupt (true: masked)."
    m_hardrst:
      base: bool
      start: 0
      description: "Mask I_HARDRST interrupt (true: masked)."

Maskb:
  type: register
  address: 0x0F
  size_bits: 8
  access: RW # Datasheet: R/W
  description: "Interrupt Mask Register B"
  fields:
    # Bits 7-1 are Reserved.
    m_gcrcsent:
      base: bool
      start: 0
      description: "Mask I_GCRCSENT interrupt (true: masked)."

Control4:
  type: register
  address: 0x10
  size_bits: 8
  access: RW # Datasheet: R/W
  description: "Control Register 4"
  fields:
    # Bits 7-1 are Reserved.
    tog_exit_aud:
      base: bool
      start: 0
      description: "Toggle exit on audio accessory (true: stop on Ra both CC)."

Status0a:
  type: register
  address: 0x3C
  size_bits: 8
  access: RO # Datasheet: R
  description: "Status Register 0A"
  fields:
    # Bits 7-6 are Reserved.
    softfail:
      base: bool
      start: 5
      description: "Soft reset retries failed (true: failed)."
    retryfail:
      base: bool
      start: 4
      description: "Packet retries failed (true: failed)."
    power:
      base: uint
      start: 2 # Bits 2-3
      end: 4
      description: "Internal power state bits (POWER3, POWER2)."
    softrst:
      base: bool
      start: 1
      description: "Soft reset packet received (true: received)."
    hardrst:
      base: bool
      start: 0
      description: "Hard reset received (true: received)."

Status1a:
  type: register
  address: 0x3D
  size_bits: 8
  access: RO # Datasheet: R
  description: "Status Register 1A"
  fields:
    # Bits 7-6 are Reserved.
    togss:
      base: uint
      start: 3 # Bits 3-5
      end: 6
      description: "Toggle state status."
      try_conversion:
        name: ToggleState
        Running: { value: 0b000, description: "Toggle logic running" }
        SrcCC1: { value: 0b001, description: "Settled to SRC on CC1" }
        SrcCC2: { value: 0b010, description: "Settled to SRC on CC2" }
        SnkCC1: { value: 0b101, description: "Settled to SNK on CC1" }
        SnkCC2: { value: 0b110, description: "Settled to SNK on CC2" }
        AudioAccessory:
          { value: 0b111, description: "Audio accessory detected" }
    rxsop2db:
      base: bool
      start: 2
      description: "Last packet SOP'' Debug (true: yes)."
    rxsop1db:
      base: bool
      start: 1
      description: "Last packet SOP' Debug (true: yes)."
    rxsop:
      base: bool
      start: 0
      description: "Last packet SOP (true: yes)."

Interrupta:
  type: register
  address: 0x3E
  size_bits: 8
  access: RW # Datasheet: R/C (Read status, Write 1 to specific bit to clear)
  description: "Interrupt Register A. Read to get status, write 1 to corresponding bit to clear."
  fields:
    i_ocp_temp:
      base: bool
      start: 7
      description: "OCP or over-temp interrupt (true: occurred). Write 1 to clear this flag."
    i_togdone:
      base: bool
      start: 6
      description: "Toggle done interrupt (true: occurred). Write 1 to clear this flag."
    i_softfail:
      base: bool
      start: 5
      description: "Soft reset fail interrupt (true: occurred). Write 1 to clear this flag."
    i_retryfail:
      base: bool
      start: 4
      description: "Retry fail interrupt (true: occurred). Write 1 to clear this flag."
    i_hardsent:
      base: bool
      start: 3
      description: "Hard reset sent interrupt (true: occurred). Write 1 to clear this flag."
    i_txsent:
      base: bool
      start: 2
      description: "Packet sent interrupt (true: occurred). Write 1 to clear this flag."
    i_softrst:
      base: bool
      start: 1
      description: "Soft reset received interrupt (true: occurred). Write 1 to clear this flag."
    i_hardrst:
      base: bool
      start: 0
      description: "Hard reset received interrupt (true: occurred). Write 1 to clear this flag."

Interruptb:
  type: register
  address: 0x3F
  size_bits: 8
  access: RW # Datasheet: R/C (Read status, Write 1 to specific bit to clear)
  description: "Interrupt Register B. Read to get status, write 1 to corresponding bit to clear."
  fields:
    # Bits 7-1 are Reserved.
    i_gcrcsent:
      base: bool
      start: 0
      description: "GoodCRC sent interrupt (true: occurred). Write 1 to clear this flag."

Status0:
  type: register
  address: 0x40
  size_bits: 8
  access: RO # Datasheet: R
  description: "Status Register 0"
  fields:
    vbusok:
      base: bool
      start: 7
      description: "VBUS OK (true: VBUS valid)."
    activity:
      base: bool
      start: 6
      description: "CC activity detected (true: active)."
    comp:
      base: bool
      start: 5
      description: "Comparator result (true: CC > MDAC)."
    crc_chk:
      base: bool
      start: 4
      description: "CRC check valid (true: last packet CRC correct)."
    alert:
      base: bool
      start: 3
      description: "Alert condition (true: error occurred)."
    wake:
      base: bool
      start: 2
      description: "Wake detected (true: device attempting attach)."
    bc_lvl:
      base: uint
      start: 0 # Bits 0-1
      end: 2
      description: "Current voltage status of the measured CC pin interpreted as host current levels."
      conversion:
        name: BcLvl
        LessThan200mV: { value: 0b00, description: "<200mV" }
        Between200And660mV: { value: 0b01, description: ">200mV, <660mV" }
        Between660And1230mV: { value: 0b10, description: ">660mV, <1.23V" }
        GreaterThan1230mV: { value: 0b11, description: ">1.23V" }

Status1:
  type: register
  address: 0x41
  size_bits: 8
  access: RO # Datasheet: R
  description: "Status Register 1"
  fields:
    rxsop2:
      base: bool
      start: 7
      description: "Last packet SOP'' (true: yes)."
    rxsop1:
      base: bool
      start: 6
      description: "Last packet SOP' (true: yes)."
    rx_empty:
      base: bool
      start: 5
      description: "Receive FIFO empty (true: empty)."
    rx_full:
      base: bool
      start: 4
      description: "Receive FIFO full (true: full)."
    tx_empty:
      base: bool
      start: 3
      description: "Transmit FIFO empty (true: empty)."
    tx_full:
      base: bool
      start: 2
      description: "Transmit FIFO full (true: full)."
    ovrtemp:
      base: bool
      start: 1
      description: "Over-temperature (true: too high)."
    ocp:
      base: bool
      start: 0
      description: "Over-current on VCONN (true: occurred)."

Interrupt:
  type: register
  address: 0x42
  size_bits: 8
  access: RW # Datasheet: R/C (Read status, Write 1 to specific bit to clear)
  description: "Interrupt Status Register. Read to get status, write 1 to corresponding bit to clear."
  fields:
    i_vbusok:
      base: bool
      start: 7
      description: "VBUSOK interrupt (true: VBUS transitioned). Write 1 to clear this flag."
    i_activity:
      base: bool
      start: 6
      description: "Activity interrupt (true: CC activity change). Write 1 to clear this flag."
    i_comp_chng:
      base: bool
      start: 5
      description: "Comparator change interrupt (true: occurred). Write 1 to clear this flag."
    i_crc_chk:
      base: bool
      start: 4
      description: "CRC check interrupt (true: packet validated). Write 1 to clear this flag."
    i_alert:
      base: bool
      start: 3
      description: "Alert interrupt (true: error condition). Write 1 to clear this flag."
    i_wake:
      base: bool
      start: 2
      description: "Wake interrupt (true: device attach attempt). Write 1 to clear this flag."
    i_collision:
      base: bool
      start: 1
      description: "Collision interrupt (true: transmit attempted during activity). Write 1 to clear this flag."
    i_bc_lvl:
      base: bool
      start: 0
      description: "BC_LVL interrupt (true: current level changed). Write 1 to clear this flag."

Fifo:
  type: buffer
  address: 0x43
  access: RW # Datasheet implies R/W for FIFO interaction.
  description: "FIFO buffer for USB PD communication (write to Tx, read from Rx)."
